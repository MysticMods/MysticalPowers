buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.0.+', changing: true
    }
}
plugins {
    id 'com.github.johnrengelman.shadow' version '5.2.0'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'maven-publish'
apply plugin: 'eclipse'

version = "${minecraft_version}-${mod_version}"
//if (System.getenv('BUILD_NUMBER') != null) {
//    version = "${minecraft_version}-${mod_version}-" + System.getenv('BUILD_NUMBER')
//}
group = 'noobanidus.mods.mysticalpowers' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'mysticalpowers'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.


minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'snapshot', version: "${mcp_mappings}"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                MysticalPowers {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                MysticalPowers {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'mysticalpowers', '--all', '--output', file('src/generated/resources/'), '--existing', sourceSets.main.resources.srcDirs[0]

            mods {
                MysticalPowers {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    maven {
        url 'https://maven.mcmoddev.com'
    }
    maven {
        name = "Jared"
        url = "https://maven.blamejared.com"
    }
    maven {
        url "http://maven.tterrag.com"
    }
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    flatDir {
        dir 'libs'
    }
    flatDir {
        dir "../libs"
    }
}

configurations {
    shade
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    if (findProject(':MysticalWorld') != null) {
        compile project(':MysticalWorld')
    } else {
        compile fg.deobf(project.dependencies.create("epicsquid.mysticalworld:mysticalworld:${mysticalworld_version}-${mysticalworld_build}") {
            transitive = false
        })
    }

    compileOnly fg.deobf("mezz.jei:jei-${jei_version}")

    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}")

    def registrate = "com.tterrag.registrate:Registrate:MC${minecraft_version}-${registrate_version}"
    implementation fg.deobf(registrate)
    shade registrate

    def noobutil = "noobanidus.libs:noobutil:${minecraft_version}-${noobutil_version}"
    implementation fg.deobf(noobutil)
    shade noobutil

}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title"     : "mysticalpowers",
                "Specification-Vendor"    : "Noobanidus",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "Noobanidus",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

shadowJar {
    configurations = [project.configurations.shade]
    relocate 'com.tterrag.registrate', 'noobanids.libs.mysticalpowers.repack.registrate'
    relocate 'noobanidus.libs.noobutil', 'noobanids.libs.mysticalpowers.repack.noobutil'

    classifier ''
}

reobf {
    shadowJar {}
}

build.dependsOn reobfShadowJar
